private Type getGenericType(Class<?> target) {
    Type[] types = target.getGenericInterfaces();
    return types.length == 0 ? this.getGenericType(target.getSuperclass()) : ((ParameterizedType)types[0]).getActualTypeArguments()[0];
}
--- mesma coisa que ---
private Type getGenericType(Class<?> target) {
    Type[] types = target.getGenericInterfaces();
    if(types.length == 0){
	return this.getGenericType(target.getSuperclass());
    }
    return ((ParameterizedType)types[0]).getActualTypeArguments()[0];
}
--------------------
Stream.of -> usa para array 
list.stream -> usa em lista
--------------------
/*mapeando um Map para um DTO*\
umMapQualquer.entrySet()
                .stream()
                .map(config -> new ConfigurationResponseDTO(config.getKey(), config.getValue()))
                .collect(Collectors.toList());

--------------------
equivalente ao List.of
Array.asList


--------------------
eu tinha escrito assim : 

	Optional<DafitiConfiguration> configuration = Optional.ofNullable(configurationService.getConfiguration());
        return configuration.isPresent() ? configurationTranslator.from(configuration).orElse(null);

mas o intelij me sugeriu fazer diferente: 

	Optional<DafitiConfiguration> configuration = Optional.ofNullable(configurationService.getConfiguration());
	return configuration.map(configurationTranslator::from).orElse(null);

//gostei
----------------------
