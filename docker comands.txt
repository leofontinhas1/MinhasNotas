    docker ps - exibe todos os containers em execução no momento.
    docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
    docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
    docker start ID_CONTAINER - inicia o container com id em questão.
    docker stop ID_CONTAINER - interrompe o container com id em questão.
    docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
    docker rm ID_CONTAINER - remove o container com id em questão.
    docker container prune - remove todos os containers que estão parados.
    docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
    docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container.
    docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
    docker run -d -e AUTHOR="Fulano" dockersamples/static-site - define uma variável de ambiente AUTHOR com o valor Fulano no container criado.
    docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
    docker build -f CAMINHO_DOCKERFILE/Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
    docker login - inicia o processo de login no Docker Hub.
    docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
    docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
    hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
    docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
    docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
	<groupId>org.postgresql</groupId>
	<artifactId>postgresql</artifactId>
	<scope>runtime</scope>
</dependency>

docker run --name feedback_elegante_db -p 5432:5432 -e POSTGRES_PASSWORD=Feedb@ck2019 -e POSTGRES_USER=feedback_elegante -e POSTGRES_DB=feedback_elegante -d postgres:11

||---DOCKERFILE---||

FROM openjdk:11

ARG JAR_FILE=target/feedback-elegante-0.0.1-SNAPSHOT.jar

VOLUME /tmp
ENV JAVA_OPTS=""

ADD $JAR_FILE app.jar
ENTRYPOINT exec java $JAVA_OPTS -Duser.timezone=America/Sao_Paulo -jar /app.jar
EXPOSE 8080

||---------------||

docker run -p 80:80 -d  correio-feedback-vue